/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hibernate;

import static hibernate.Tipo.LCD;
import static hibernate.Tipo.LED;
import static hibernate.Tipo.OLED;
import static hibernate.Tipo.TFT;
import static java.awt.Color.BLACK;
import static java.awt.Color.RED;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import hibernate.Tipo;
import java.awt.Frame;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonModel;
import javax.swing.JRadioButton;
/**
 *
 * @author IFPR
 */
public class MonitorForm extends javax.swing.JFrame {

    /**
     * Creates new form MonitorForm
     * @param parent
     * @param modal
     */
    public MonitorForm(java.awt.Frame parent, boolean modal, GerenciarMonitor gerMonitor) {
        //super(parent, modal);
        boolean lcd = false;
       this.gerMonitor = gerMonitor;
        initComponents();
       mensagemLB.setVisible(false);
       sdf = new SimpleDateFormat("dd/MM/yyyy");
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        nomeLB = new javax.swing.JLabel();
        nomeTF = new javax.swing.JTextField();
        numSerieLB = new javax.swing.JLabel();
        dataFabLB = new javax.swing.JLabel();
        modeloLB = new javax.swing.JLabel();
        tipoLB = new javax.swing.JLabel();
        lcdRB = new javax.swing.JRadioButton();
        ledRB = new javax.swing.JRadioButton();
        oledRB = new javax.swing.JRadioButton();
        tftRB = new javax.swing.JRadioButton();
        tamanhoLB = new javax.swing.JLabel();
        numSerieTF = new javax.swing.JTextField();
        modeloTF = new javax.swing.JTextField();
        tamanhoTF = new javax.swing.JTextField();
        salvarBT = new javax.swing.JButton();
        cancelarBT = new javax.swing.JButton();
        mensagemLB = new javax.swing.JLabel();
        dataFabricacaoTF = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Monitor-icon (1).png"))); // NOI18N
        jLabel1.setText("Dados do monitor");

        nomeLB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nomeLB.setText("Nome:");

        numSerieLB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        numSerieLB.setText("Numero de Série:");

        dataFabLB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dataFabLB.setText("Data Fabricação:");

        modeloLB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        modeloLB.setText("Modelo:");

        tipoLB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tipoLB.setText("Tipo:");

        lcdRB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lcdRB.setText("LCD");
        lcdRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lcdRBActionPerformed(evt);
            }
        });

        ledRB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ledRB.setText("LED");
        ledRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ledRBActionPerformed(evt);
            }
        });

        oledRB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        oledRB.setText("OLED");
        oledRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oledRBActionPerformed(evt);
            }
        });

        tftRB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tftRB.setText("TFT");
        tftRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tftRBActionPerformed(evt);
            }
        });

        tamanhoLB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tamanhoLB.setText("Tamanho:");

        salvarBT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/apply.png"))); // NOI18N
        salvarBT.setText("Salvar");
        salvarBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarBTActionPerformed(evt);
            }
        });

        cancelarBT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/cancel.png"))); // NOI18N
        cancelarBT.setText("Cancelar");
        cancelarBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarBTActionPerformed(evt);
            }
        });

        mensagemLB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        mensagemLB.setForeground(new java.awt.Color(255, 0, 0));
        mensagemLB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/agt_update_critical.png"))); // NOI18N
        mensagemLB.setText("Campo(s) com preenchimento incorreto");

        try {
            dataFabricacaoTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tamanhoLB)
                    .addComponent(tipoLB)
                    .addComponent(modeloLB)
                    .addComponent(dataFabLB)
                    .addComponent(nomeLB)
                    .addComponent(numSerieLB)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(salvarBT)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelarBT)
                        .addGap(22, 22, 22))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lcdRB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ledRB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(oledRB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tftRB))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(tamanhoTF, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(modeloTF, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(dataFabricacaoTF, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                                .addComponent(nomeTF, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(numSerieTF, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addContainerGap(36, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(mensagemLB)
                .addGap(22, 22, 22))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelarBT, salvarBT});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomeLB)
                    .addComponent(nomeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numSerieTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numSerieLB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataFabricacaoTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataFabLB))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modeloLB)
                    .addComponent(modeloTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tipoLB)
                    .addComponent(lcdRB)
                    .addComponent(ledRB)
                    .addComponent(oledRB)
                    .addComponent(tftRB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tamanhoLB)
                    .addComponent(tamanhoTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(mensagemLB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelarBT)
                    .addComponent(salvarBT))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelarBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarBTActionPerformed
        // TODO add your handling code here:
        limpar();
        dispose();
        
    }//GEN-LAST:event_cancelarBTActionPerformed

    private void salvarBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarBTActionPerformed
        // TODO add your handling code here: 
        
        if(validarForm()){
            
            monitor.setNome(nomeTF.getText().trim());
           
            try {
              Date dataFab = sdf.parse(dataFabricacaoTF.getText().trim());
                monitor.setDataFabricacao(dataFab);
            } catch (ParseException ex) {     
            }                           
            monitor.setNumSerie(Integer.parseInt(numSerieTF.getText()));
            monitor.setModelo(modeloTF.getText());
            monitor.setTamanho(Integer.parseInt(tamanhoTF.getText().trim()));
            if(monitor.getId() > 0){
               gerMonitor.update(monitor);                
            }else{   
                gerMonitor.create(monitor);
            }
            limpar();
            dispose();
            JOptionPane.showMessageDialog(this, "Monitor salvo com sucesso");
            
        }else{
            mensagemLB.setVisible(true);
        }
        
    }//GEN-LAST:event_salvarBTActionPerformed

    private void lcdRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lcdRBActionPerformed
        ledRB.setSelected(false);
        oledRB.setSelected(false);
        tftRB.setSelected(false);
        lcdRB.setSelected(true);
        
        monitor.setTipo(Tipo.LCD);
    }//GEN-LAST:event_lcdRBActionPerformed

    private void ledRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ledRBActionPerformed
        // TODO add your handling code here:
        ledRB.setSelected(true);
        oledRB.setSelected(false);
        tftRB.setSelected(false);
        lcdRB.setSelected(false);
        monitor.setTipo(Tipo.LED);
    }//GEN-LAST:event_ledRBActionPerformed

    private void oledRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oledRBActionPerformed
        // TODO add your handling code here:
        ledRB.setSelected(false);
        oledRB.setSelected(true);
        tftRB.setSelected(false);
        lcdRB.setSelected(false);
        monitor.setTipo(Tipo.OLED);
    }//GEN-LAST:event_oledRBActionPerformed

    private void tftRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tftRBActionPerformed
        // TODO add your handling code here:
        ledRB.setSelected(false);
        oledRB.setSelected(false);
        tftRB.setSelected(true);
        lcdRB.setSelected(false);
        monitor.setTipo(Tipo.TFT);
    }//GEN-LAST:event_tftRBActionPerformed

     public void objectToForm(){
         
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
           ex.printStackTrace();
        }
        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/db_monitores", "root", "");
            String sql = "SELECT * FROM tb_monitores WHERE id = ? ";
            
            PreparedStatement pstm = conn.prepareStatement(sql);
                       
            pstm.setInt(1, monitor.getId());
            
            ResultSet rs = pstm.executeQuery();

            while(rs.next()){
               String nome = rs.getString("nome");
               int numSerie= rs.getInt("numSerie");
               Date dataFabricacao = rs.getDate("dataFabricacao");
               String modelo = rs.getString("modelo");
               int tamanho = rs.getInt("tamanho");
               String tipoo = rs.getString("tipo");
               
                nomeTF.setText(nome);
                numSerieTF.setText(Integer.toString(numSerie));
                modeloTF.setText(modelo);
                tamanhoTF.setText(Integer.toString(tamanho));
                dataFabricacaoTF.setText(sdf.format(dataFabricacao));
                    
                if(tipoo.equals("LCD")){
                   monitor.setTipo(LCD);
                  lcdRB.setSelected(true);                
               }
                if(tipoo.equals("LED")){
                    monitor.setTipo(LED);
                  ledRB.setSelected(true);
              }
                 if(tipoo.equals("OLED")){
                    monitor.setTipo(OLED);
                  oledRB.setSelected(true);
              } if(tipoo.equals("TFT")){
                   monitor.setTipo(TFT);
                  tftRB.setSelected(true);
              }               
            }
            pstm.close();
            
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

     }
    
    private boolean validarForm(){
        
        boolean isValid = true;
        
        if(nomeTF.getText().trim().isEmpty()){
            nomeLB.setForeground(RED);
            isValid = false;
        }else{
            nomeLB.setForeground(BLACK);
        } 
        
        if(numSerieTF.getText().trim().isEmpty()){
            numSerieLB.setForeground(RED);
            isValid = false;
        }else{
            numSerieLB.setForeground(BLACK);
        }
        
        if(dataFabricacaoTF.getText().trim().length() != 10){
            dataFabLB.setForeground(RED);
            isValid = false;
        }else{
            dataFabLB.setForeground(BLACK);
        }
        
        if(modeloTF.getText().trim().isEmpty()){        
            modeloLB.setForeground(RED);
            isValid = false;
        }else{
            modeloLB.setForeground(BLACK);
        }
        
        if(lcdRB.getSelectedObjects() == null && ledRB.getSelectedObjects() == null && oledRB.getSelectedObjects() == null && tftRB.getSelectedObjects() == null){
  
            tipoLB.setForeground(RED);
            isValid = false;
        } else {
            tipoLB.setForeground(BLACK);
        }
        
        if(tamanhoTF.getText().trim().isEmpty()){
            tamanhoLB.setForeground(RED);
            isValid = false;
        }else{
            tamanhoLB.setForeground(BLACK);
                    
        }
        
        return isValid;
    }
    
    
    
    /**
     * @param args the command line arguments
     */
        private Tipo tipo;
        private GerenciarMonitor gerMonitor;
        private Monitor monitor;
        SimpleDateFormat sdf;
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelarBT;
    private javax.swing.JLabel dataFabLB;
    private javax.swing.JFormattedTextField dataFabricacaoTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JRadioButton lcdRB;
    private javax.swing.JRadioButton ledRB;
    private javax.swing.JLabel mensagemLB;
    private javax.swing.JLabel modeloLB;
    private javax.swing.JTextField modeloTF;
    private javax.swing.JLabel nomeLB;
    private javax.swing.JTextField nomeTF;
    private javax.swing.JLabel numSerieLB;
    private javax.swing.JTextField numSerieTF;
    private javax.swing.JRadioButton oledRB;
    private javax.swing.JButton salvarBT;
    private javax.swing.JLabel tamanhoLB;
    private javax.swing.JTextField tamanhoTF;
    private javax.swing.JRadioButton tftRB;
    private javax.swing.JLabel tipoLB;
    // End of variables declaration//GEN-END:variables

    private void limpar() {
        nomeTF.setText("");
        nomeLB.setForeground(BLACK);
              
        numSerieTF.setText("");
        numSerieLB.setForeground(BLACK);
        
        dataFabricacaoTF.setText("");
        dataFabLB.setForeground(BLACK);
        
        modeloTF.setText("");
        modeloLB.setForeground(BLACK);
        
        buttonGroup1.clearSelection();
        tipoLB.setForeground(BLACK);
        
        tamanhoTF.setText("");
        tamanhoLB.setForeground(BLACK);
        
        mensagemLB.setVisible(false);
        
        ledRB.setSelected(false);
        oledRB.setSelected(false);
        tftRB.setSelected(false);
        lcdRB.setSelected(false);      
    }

    public void setMonitor(Monitor monitor) {
                this.monitor = monitor;        
    }
}
